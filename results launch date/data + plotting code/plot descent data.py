# This plot all code is compatible with the text file generated by the
# other code that plops out a text file from the receiver

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import pandas as pd
import numpy as np
import os
plt.close('all')
# change this if necessary!
seperation_mark = ','  # say you use commas between each send variable, you would make this ','
data_file_name = 'Cansat Data Descent.txt'

# removes all the non-data (not containing commas) from the data file

with open(data_file_name, "r") as file:
    lines = file.readlines()
with open('temporary file.txt', "w+") as newfile:
    for line in lines:
        if ',' in line:
            newfile.write(line)

# gets data
df = pd.read_csv('temporary file.txt', sep=seperation_mark, header=None)
os.remove('temporary file.txt')
df.columns = ["sats", "latitude", "longitude", "altitude", "temperature", "pressure", "timedelay"]
map_img = plt.imread('map.png')

timelist = [0]
for times in df.timedelay:
    next_time = timelist[-1] + times/1000
    timelist.append(next_time)
timelist.pop(0)

# turns everything in superior numpy arrays for manipulation
array_long = np.array(df.longitude.tolist())
array_lat = np.array(df.latitude.tolist())
plot_alt = np.array(df.altitude.tolist())
plot_3d_alt = np.array(df.altitude.tolist())


boundary_box = None
# getting the boundaries for the 2dimensional map
# if it's only zeros, it will skip this and boundary box will stay None
if not np.all((array_long == 0)):
    boundary_box = ((np.min(array_long[np.nonzero(array_long)]),   df.longitude.max(),
                     np.min(array_lat[np.nonzero(array_lat)]), df.latitude.max()))
# printing it so we can create a map image based on extreme values
if boundary_box != None:
    print(boundary_box)
else:
    print("It looks like there was no GPS data in your text file ")
    print("Please double check this ")


# This is all the processing done with the GPS coördinates
if boundary_box != None:
    # removing values below zero altitude.
    counter = 0;
    for longitude in array_long:
        if plot_3d_alt[counter] <= 0:
            plot_3d_alt[counter] = 0
            plot_alt[counter] = 0
        if longitude == 0:
            # this is done so non_fix data is not plotted
            array_long = np.delete(array_long, counter)
            array_lat = np.delete(array_lat, counter)
            plot_3d_alt = np.delete(plot_3d_alt, counter)
            counter -= 1
        counter += 1

    # this is for calculating wind speed
    radius_earth = 6373000.0  # radius earth
    wind_speed = []
    for counter, i in enumerate(df.latitude):
        try:
            lat1 = np.radians(df.latitude[counter])
            lat2 = np.radians(df.latitude[counter+1])
            lon1 = np.radians(df.longitude[counter])
            lon2 = np.radians(df.longitude[counter+1])

            dlat = lat2 - lat1
            dlon = lon2 - lon1
            a = np.sin(dlat / 2) ** 2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon / 2)**2
            c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))
            distance = radius_earth * c

            time_difference = df.timedelay[counter]
        except:
            True
        if distance > 10:
            distance = 0

        wind_speed.append(distance / (time_difference/1000))

total_wind_speed = 0
average_counter = 0;
for current_speed in wind_speed[10:-2]:
    if current_speed != 0:
        total_wind_speed += current_speed
    average_counter += 1

print("Average wind Speed: ", total_wind_speed / counter, "ms^-1")

t_start = np.argmax(plot_alt);
max_altitude = plot_alt[t_start]
start_time = timelist[t_start]
d_t = timelist[-2] - start_time
d_h = max_altitude - plot_alt[-2]

print("Average descent speed: ", d_h / d_t, " ms^-1")

max_altitude = plot_alt[t_start+15]
start_time = timelist[t_start+15]
d_t = timelist[-15] - start_time
d_h = max_altitude - plot_alt[-15] 

print("Terminal velocity: ",d_h / d_t, "ms^-1")

# for plotting temperature, pressure and wind speed
fig, ax = plt.subplots(4, figsize=(16, 9))
ax[0].plot(timelist, df.temperature, color='red')
ax[0].set_xlabel('time (s)')
ax[0].set_ylabel('temperature (℃)')
ax[0].grid()
ax[1].plot(timelist, df.pressure, color='orange')
ax[1].set_xlabel('time (s)')
ax[1].set_ylabel('pressure (Pa)')
ax[1].grid()
ax[3].plot(timelist, plot_alt, color='red')
ax[3].set_xlabel('time (s)')
ax[3].set_ylabel('altitude (m)')
ax[3].grid()

if boundary_box != None:
    ax[2].plot(timelist, wind_speed, color='purple')
    ax[2].set_xlabel('time (s)')
    ax[2].set_ylabel('wind / horizontal speed (m/s)')
    ax[2].grid()

    # for plotting  2d map
    fig, ax = plt.subplots(figsize=(16, 9))
    color_map = plt.cm.get_cmap('hot')
    im = ax.scatter(array_long, array_lat, cmap=color_map, zorder=1, alpha=1, c=plot_3d_alt, s=10)
    fig.colorbar(im, ax=ax, label="altitude (m)")
    ax.set_xlim(boundary_box[0], boundary_box[1])
    ax.set_ylim(boundary_box[2], boundary_box[3])
    ax.set_xlabel('longitude')
    ax.set_ylabel('latitude')
    ax.ticklabel_format(useOffset=False)
    ax.imshow(map_img, zorder=0, extent=boundary_box, aspect='equal')

    # for plotting the 3d map
    fig = plt.figure(figsize=(16, 9))
    ax = Axes3D(fig)
    ax.set_xlabel('longitude')
    ax.set_ylabel('latitude')
    ax.set_zlabel('altitude (m)')
    plt.plot(array_long, array_lat, plot_3d_alt, color='hotpink')
    ax.ticklabel_format(useOffset=False)
    plt.show()
